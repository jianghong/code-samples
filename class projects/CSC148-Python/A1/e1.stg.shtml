<!DOCTYPE HTML PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" lang="en"><head>



  
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <link rel="stylesheet" href="e1.stg_files/styles.css" type="text/css">

 
    <title>
      CSC148/A48H Exercise 1
    </title>
  </head><body>
    <div class="title">
      <h1>
        CSC148/A48H Exercise 1
      </h1>
    </div>

    <h3>
      Due: 1 a.m., Monday, January 17, 2011
    </h3>

    <p>
      That is, 01:00:00 EST, by the CDF machines clock.  As the next
      section tells you, you should have submitted several times by
      then.
    </p>

    <h2>
      How to submit your exercises
    </h2>
    <p>
      Submit your exercise files electronically, using the MarkUs
      system.  Log in to it at <tt><a href="https://stanley.cdf.toronto.edu/markus/csc148-2011-01">https://stanley.cdf.toronto.edu/markus/csc148-20111-01</a></tt>,
      using your CDF login and password.
    </p>
    
    <p>
      When we mark your work, the results will appear in the place
      where you submitted your work, in a new or updated file called
      "<tt>MARKING</tt>".
    </p>

    <h2>
      How do the exercises work?
    </h2>
    <p>
      The exercises in this course are quite separate from the
      assignments.  There are several rules and procedures about the
      exercises:
    </p><ul>
      <li>You must work on them alone, without a partner.  The usual
      academic offence rules apply: don't look at another student's
      code, don't show your code to anyone else, and discuss only
      generalities of your solution with anyone else — not
      specific features or code details.
      </li>
        
      <li>The exercises are not very big, and they are not worth much:
      just 2% each of your course grade. The idea is that you won't
      take long to do them, and that you shouldn't find them a source
      of stress.
      </li>
        
      <li>Our goal is for all of you to get full marks on all the
      exercises. We hope to make that possible by making them small
      and uncomplicated, and also by pre-marking them.
      </li>

      <li>What's "pre-marking"? That means marking your work early and
      often: typically at least ten times spread over the three or
      four days before each exercise is due.  The marking is automatic
      (done by a script), but it should provide a brief explanation of
      what's wrong as well as giving your mark.  It makes sense for
      you to submit repeatedly until your code passes all our tests.
      </li>

      <li>Your mark is either zero or perfect on each part of an
      exercise. If the exercise has two parts, that means your mark
      may be 0, 1 or 2 (out of 2), but you only get 1 if one part is
      perfect and the other part is imperfect.  There are no part
      marks for imperfect work.
      </li>
        
      <li>Because the marking is automated, you must follow the
      requirements exactly. File names must be exactly as specified,
      including capitalization; and module, class and function names
      must also be exactly right.
      </li>

      <li><strong style="color: red;">Because we are pre-marking, there
      are no re-marks, and you can't submit late, either.</strong>
      </li>
    </ul>


    
        <h2>
      Exercise 1
    </h2>
    
    <p>
      There are two unrelated parts to this exercise.  For each part,
      there is a single file you must submit.  The file names both
      start with "<code>e1</code>" — that's "ee-one", not
      "ee-ell".
    </p>

    <h3>
      Part A
    </h3>

    <p>
    Submit a file called "<code>e1a.py</code>" containing a function
    called "<code>square_root</code>".  Your function must take two
    parameters, <code>x</code> and <code>eps</code>, and it must
    return one value, the square root of <code>x</code> to within an
    "accuracy" of <code>eps</code>.  ("Accuracy" is defined soon.)
    For example, <code>square_root(2, 0.01)</code> should return a
    number between about 1.404 and 1.424.
    </p>

    <p>
      Calculate the square root using <em>Newton's method</em>.  This
      is an iterative method: it starts with a guess at the answer and
      improves the guess over and over until it is "close enough".  If
      we are looking for the square root of <em>x</em>, and the
      current guess is <em>this_guess</em>, then the next guess is
    </p>

    <blockquote>
      <em>next_guess</em> = 0.5 × ( <em>this_guess</em> + <em>x</em>/<em>this_guess</em>)
    </blockquote>
    
    <p>
      Your function should start with a first guess of 1.0, and
      continue until the difference between two successive guesses is
      less than the parameter <code>eps</code>.  (That's the
      definition of "accuracy".)  If that takes more than ten
      iterations, your function should stop and return -1.0.  That is
      not a very satisfactory way to indicate failure, but we are not
      going to give your function any very difficult cases, and we
      don't want to ask you to use exceptions yet.
    </p>

    <p>
      There is a library function <code>math.sqrt</code>. Do not use
      it. In fact, do not include the string "<code>sqrt</code>" or
      the string "<code>import</code>" anywhere in your
      <code>e1a.py</code> file, even as part of another word such as
      the English "important" or the possibly Klingon "besqrted".
      Also, do not use the built-in <code>**</code> (exponentiation)
      operator. The idea is to calculate the square root using just
      arithmetic operations.
    </p>

    <p>
      Notice, please, that all the values in this part of the exercise
      are floats. If you accidentally use integers, you may run into
      serious mysterious troubles, so please be careful to provide
      fractional parts for numeric constants. (You should use integers
      where appropriate, of course; for example, count the iterations
      with an integer.)
    </p>

    <p>
      <em>Hint</em>: This sounds like a hard problem, but it's
      surprisingly easy (and surprisingly good, at least for small
      positive numbers). You're not expected to know Newton's method,
      though you may have heard of it, but as far as Python
      programming techniques are concerned, we hope this part of the
      exercise is entirely review for you.
    </p>


    <h3>
      Part B
    </h3>

    <p>
      Submit a file called "<code>e1b.py</code>" containing two Python
      classes, "<code>Toy</code>" and "<code>Dog</code>".  The idea is
      that a <code>Dog</code> can play with a <code>Toy</code>.
    </p>

    <p>
      A <code>Toy</code> has no instance variables and one method,
      <code>play</code>, which prints "<code>Squeak!</code>" (with the
      exclamation mark and the capital 'S', without spaces, and then a
      newline). The constructor for <code>Toy</code> (its
      <code>__init__</code> method) takes no parameters (except the
      usual <code>self</code>) and does nothing, so it can probably be
      omitted.
    </p>

    <p>
      A <code>Dog</code> has one instance variable, its name, which
      must be provided as a parameter to the constructor.  It has two
      methods:
    </p><ul>
      <li><code>call(self, shout)</code> returns <code>True</code> if
      <code>shout</code> is exactly "<code>Here, <i>n</i>!</code>"
      (with the comma, the space and the exclamation mark), where
      <code><i>n</i></code> is the <code>Dog</code>'s name. Otherwise,
      it returns <code>False</code>.
      </li>

      <li><code>play(self, toy, n)</code> prints "<code>Yip! </code>"
      (with a space) followed by the output from <code>toy.play</code>
      <em>on the same line</em>.  This happens <code>n</code> times,
      with the <code>n</code> outputs on separate lines.  If
      <code>n</code> is negative, it is the same as if it were 0.
      </li>
    </ul>

    We can change what your <code>Toy</code> class does, so don't
    build the "Squeak!" into your <code>Dog</code> class's
    <code>play</code> method.
  


    <div class="spacer">


    <!-- Google Analytics -->
    <script type="text/javascript">
      var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
      document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
	</script><script src="e1.stg_files/ga.js" type="text/javascript"></script>
    <script type="text/javascript">
      try {
	    var pageTracker = _gat._getTracker("UA-12283154-1");
	    pageTracker._trackPageview();
      } catch(err) {}
	</script>

  </div></body></html>