<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN">

<html lang="en">
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
	<title>untitled</title>
	<meta name="generator" content="TextMate http://macromates.com/">
	<meta name="author" content="reid">
	<title>Assignment 4: Dropbox</title>
</head>
<body>

	<h1>Assignment 4: Dropbox</h1> <p><b>Due: Monday April 2, (extended from 10 p.m. to midnight)</b></p>

<font color="red"><p>The starter code is now in the a4 directory of your repo. The starter code primarly handles the bookkeeping functions for the server, since the server needs to keep track of clients and files.</font></p>

<p>The <a href="./a4_marking.txt">marking scheme</a> for this assignment is available to help guide your
work, and to help you prioritize your efforts</p>

 <h2>Introduction</h2>

 <p><a href="http://www.dropbox.com/">Dropbox</a> is a service that allows a
user to save files on their server, and automatically synchronize the files
between the server and a number of devices including computers, phones, and
tablets. The user installs client software on their computer, and the client
software takes care of automatically synchronizing files between the client and
the server.</p>

 <p>Your task in this assignment is to implement a simple version of Dropbox,
using the file, socket and select system calls you have been learning in class.
While you might find it interesting to read more about Dropbox itself, the
specifications in this document define your task for the assignment.</p>

<h2><code>dbclient</code></h2>

<p>When the <code>dbclient</code> is run, it will first establish a socket
connection to the <code>dbserver</code>, and will send a message containing the
userid, and the name of the directory that the client wants to synchronize. We
will restrict synchronization to files in one directory and will not handle
subdirectories.</p>

<p>Every N seconds, the client will initiate a synchronization operation.</p>


<p>A synchronization operation uses the following algorithm:</p>

<p>For each file in the local directory</p>

<ul>

    <li>get the last modified time and size</li>

    <li>send a <code>sync_message</code> request to the server containing the
    filename, last modified time, and size.</li>

    <li>read a <code>sync_message</code> response from the server containing
    filename, the server's last modified time for the file, and the size of the
    file on the server.</li>

    <li>if the last modified time in the message from the server is more recent
    that the local last modified time</li>

    <ul>
        <li> the client will read the file from the server one CHUNKSIZE chunk
        at a time and will replace the local file with the contents from the
        server.</li>
    </ul>

    <li>otherwise, the client will send the local file one CHUNKSIZE chunk at a
    time to the server.</li>

</ul>


<p>After iterating over all files in the local directory, the client checks to see if the server has any new files to send by sending an "empty" <code>sync_message</code> (a message with an empty string for the file name, a last modified time of 0, and a size of 0). It reads the response message from the server. If the server's response message is also an empty message, then the client knows there are no new files.</p>

<p>If the server's response message has a non-empty file name, or a non-zero last modified time, then the client will read the file from the server as above.  After it has completed reading the file, it will repeat the process of sending a new file request (by sending an empty <code>sync_message</code>) and reading new files from the server until it receives an empty message from the server. </p>


<h2><code>dbserver</code></h2>

<p>The server is a little more complicated.  It will create a directory for each user under the directory name provided by the user. If two users use the same directory name, we will assume they are sharing the directory. Because the server is handling multiple connections, we don't want the server to block on a read or accept from any client. To solve this problem, we will use <code>select</code> to multiplex between clients. This also means that we will need to keep track of the type of message that the server expects to receive from a client depending on the state of the client.</p>

<p>When the server is notified (via select), that a message is available to read from the client, there are several possible options. The server may be expecting </p> 
<ul>
    <li>a <code>login_message</code>, if it hasn't read anything from the client yet.</li>
    <li>a <code>CHUNKSIZE</code> chunk of a file, if the server has realized that a file is newer on the client than on the server.</li>
    <li>a <code>sync_message</code>, otherwise.
</ul>

<p>The server will store the following information for each client:</p>
<ul>
    <li>The user id of the client</li>
    <li>The socket file descriptor</li>
    <li>The directory name where the client's files are stored</li>
    <li>A list of the files that the client has synchronized with the server.  Information about each file includes:</li>
    <ul>
        <li>The file name</li>
        <li>The last modified time sent by the client.</li>
    </ul>
</ul>

<p>A partial algorithm that describes the communication between the server and a single client follows.  Note that the server only acts in response to a message from the client. Aside from the initial setup, it doesn't initiate any operations.</p>

<pre>
handle a read from a client
    case LOGIN:
        read login message and store userid and dir in client array
        create dir if doesn't exist
        set state = SYNC
    case SYNC:
        read sync_message
        if sync_message is an empty message
            figure out how to identify a file on the server that is not on 
            the client, and add it to the client list
        else 
            find filename in client's files array
            
        write response (if there are no new files to send, then send an empty response) 
        if file's mtime is newer in clients' files array on server than in sync_message
            write file to client
            set state = SYNC
        else
            set state GETFILE 
            (keep track of which file we are expecting to read)
    case GETFILE:
        read chunk
        write chunk
        if finished reading file (keep track of size vs bytes read)
            set state SYNC          
</pre>

<p>Part of the algorithm is missing.  In particular, the server needs to handle an empty <code>sync_message</code> from the client which is an indication that the client is checking if the server has a file that the client does not. You will need to figure out a strategy to identify the files that the server is storing in the appropriate directory that are not in the client's list of files, so that they can be added to the client's list.</p>



<p><b>Tips</b>: </p>
<ul>
    <li>Take advantage of the example code shown in class and given on the course web site. The example code will help you set up the sockets and the select call.</li>
    
    <li>Write the code incrementally! Make sure each step compiles and runs before moving on. It will save you time!! The first step might be to write a client that just sends the login message, and the server that receives only the login message a stores the client info. An intermediate step might be one where no file data is transferred, but the sync_messages are sent. Write and test a function that fills in a sync_message for a file.</li>
    
    <li>Note that we have taken lots of shortcuts with the starter code. In particular, the number of clients and the number of files are artificially limited.  I would <em>not</em> write production code this way, but it simplifies this part of the assignment.</li>
    
    <li>Also note that we don't allow file deletion on the server. Once a file has been synchronized to the server, it stays there.</li>
    
    <li>Be careful to handle the case where a client connection is closed.</li>
    
</ul>

<h2>What to submit</h2>

<p>Commit to the a4 directory of your repository all source code files, header files, and a Makefile that will build two programs: <code>dbclient</code> and <code>dbserver</code>.</p>




</body>
</html>
